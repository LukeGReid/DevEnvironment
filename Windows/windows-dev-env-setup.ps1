<#
Created by: 
    Luke reid
Created: 
    April 2022
Dependencies: 
    chocolatey (https://chocolatey.org/install#individual)
    powershell 3.0 or greater
Description:
    Development environment setup script
#>
####### Parameters ########
param 
(
    [Switch]$AdminOnly, #Only performs the parts that require admin
    [Switch]$UserProfileOnly, #Only performs parts that don't require admin
    [Switch]$CleanInstall, #Remove existing config (except VScode) - this includes apps, extensions, and generic files
    [Switch]$FreshGitignore, #Removes the global gitignore file as well as the path 
    [Switch]$FreshKeys, #Removes existing SSH keys and the script will request that you re-generate them again
    [string]$GitServiceDNS = "github",
    [string]$GitServiceURL = "https://$GitServiceDNS"
)
$RegularInstall = $true
if($AdminOnly -or $UserProfileOnly)
{
    $RegularInstall = $false
}

####### Variables ########
$CurrentDate = (Get-Date).ToString("yyyy_MM_dd_HH_mm_ss")
#Paths
$path_VSCodeSettingsDir = "$env:APPDATA\Code\User"
$path_VSCodeSettingsFile = "$path_VSCodeSettingsDir\settings.json"
$path_VSCodeSettingsBackup = "$path_VSCodeSettingsDir\settings_backup_$CurrentDate.json"
$path_SSHSettingsDirectory = "$env:HOMEDRIVE$env:HOMEPATH\.ssh"
$path_SSHKnownHosts = "$path_SSHSettingsDirectory\known_hosts"
$path_GPGSettingsDirectory = "$env:HOMEDRIVE$env:HOMEPATH\.gnupg"
$path_GlobalGitignorePath = "$env:HOMEDRIVE$env:HOMEPATH\.gitignore-global"

#Chocolatey package list (PackageName/Parameters)
#Note the order of quotes in the arguments below. "''" is required for params and '""' is required for install_arguments.
#Paths ensure that all paths are configured for the installers.
$Choco_PackageList = @{
    "vscode" = @{
        "params" = ""
        "install_arguments" = ''
        "paths" = @("C$env:HOMEDRIVE$env:HOMEPATH\AppData\Local\Programs\Microsoft VS Code\")
      }  
    "git" = @{
        "params" = "'/Editor:VisualStudioCode /GitAndUnixToolsOnPath /NoShellIntegration /SChannel /WindowsTerminalProfile'"
        "install_arguments" = ''
        "paths" = @("C:\Program Files\Git\usr\bin", "C:\Program Files\Git\cmd", "C:\Program Files\Git\mingw64\bin")
    }
    #Installing powershell-core to turn vscode into an powershell IDE. ISE is being sunsetted by microsoft. Documentation below.
    #https://docs.microsoft.com/en-us/powershell/scripting/windows-powershell/ise/introducing-the-windows-powershell-ise?view=powershell-7.2
    #https://docs.microsoft.com/en-us/powershell/scripting/dev-cross-plat/vscode/how-to-replicate-the-ise-experience-in-vscode?view=powershell-7.2
    "powershell-core" = @{
        "params" = "'/CleanUpPath'"
        "install_arguments" = '"ADD_FILE_CONTEXT_MENU_RUNPOWERSHELL=1 ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 USE_MU=1 ENABLE_MU=1"'
        "paths" = @("C:\Program Files\PowerShell\7\")
    }
}

#VSCode Extension List
$VSCode_ExtensionList = @{
    "codezombiech.gitignore" = "gitignore template extension for vscode" #(https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore)
    "redhat.vscode-yaml" = "yaml extension for vscode" #(https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml)
    "redhat.ansible" = "ansible extension for vscode " #(https://marketplace.visualstudio.com/items?itemName=redhat.ansible)
    "ionutvmi.reg" = ".reg extension for registry files in vscode" #(https://marketplace.visualstudio.com/items?itemName=ionutvmi.reg)
    "ms-vscode.PowerShell" = "powershell extension for .ps1 files in vscode" #(https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell)
    "ms-python.vscode-pylance" = "python extensions for .py files" #(https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    "ms-python.python" = "python extensions for .py files" #(https://marketplace.visualstudio.com/items?itemName=ms-python.python)
}

#Configuration Value Pairs
$VSCode_configurationList = @{
    "gitlab.instanceUrl" = $GitServiceURL
    "search.useIgnoreFiles" = $true
    "search.useGlobalIgnoreFiles" = $true
    "git.autofetch" =  $true
}

#SSH-Specifc Configuration
$configSSH_KeyType = "ed25519"

function Write-Information{
    param (
        [string]$InputString
    )
    Write-Host $InputString -BackgroundColor Black -ForegroundColor Cyan
}

####### Remove Stale Content for Clean Install ########
if($CleanInstall)
{
    Write-Warning "Clean install requested. Removing files generated by this script before execution. VSCode and its settings remain for safety."
    if($UserProfileOnly -or $RegularInstall)
    {
        Write-Warning "Removing $GitServiceDNS from SSH known_hosts"
        Set-Content -Path $path_SSHKnownHosts -Value (get-content -Path $path_SSHKnownHosts | Select-String -Pattern $GitServiceDNS -NotMatch)
        Write-Warning "Removing note files"
        Remove-Item "$path_SSHSettingsDirectory\_ *"

        if($env:Path -match "Microsoft VS Code")
        {
            Write-Warning "Removing VSCode Extensions. The settings for these will remain but the exetensions will be deleted first."
            foreach($Extension in $VSCode_ExtensionList.keys)
            {
                code --uninstall-extension $Extension
            }
        }
    }

    if($AdminOnly -or $RegularInstall)
    {
        Write-Warning "Uninstalling apps other than VSCode"
        foreach($Package in $Choco_PackageList.Keys)
        {
            if(!($Package -match "vscode"))
            {
                choco uninstall $Package -y
            }
        }
        #Refresh path as it might have changed
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        refreshenv
    }
}
if($CleanInstall -or $FreshKeys)
{
    Write-Warning "Removing note files"
    Remove-Item "$path_SSHSettingsDirectory\_ *"
}

####### Remove existing SSH keys if requested by the user ########
if($FreshKeys)
{
    Write-Warning "Removing $GitServiceDNS from Git known_hosts"
    Set-Content -Path $path_SSHKnownHosts -Value (get-content -Path $path_SSHKnownHosts | Select-String -Pattern $GitServiceDNS -NotMatch)
    Write-Warning "Removing id_$configSSH_KeyType files from $path_SSHSettingsDirectory"
    Remove-Item "$path_SSHSettingsDirectory\id_$configSSH_KeyType*"
    Write-Warning "Removing the $path_GPGSettingsDirectory path. It will be re-generated with a new GPG keygen"
    Remove-Item -Force -Recurse $path_GPGSettingsDirectory
}

####### Remove existing global gitignore if requested by the user ########
if($FreshGitignore)
{
    Remove-Item $path_GlobalGitignorePath
    git config --global --unset core.excludesfile
}

####### Application Install ########
#Install apps from Chocolatey. It will first try to install and then upgrade. If you have git or or vscode installed already just note that
#   there might be some setting inconsistencies between your install and the recommended settings below. You can uninstall previous versions
#   of these applications by running running this script with the -CleanInstall parameter or by running choco uninstall [package] -y and then running this script again .
if($AdminOnly -or $RegularInstall)
{
    ###Commented out for external user
    # #Change the chocolatey sources
    # choco source disable -n="chocolatey"
    # $ChocolateyInternalSource = choco sources list | select-string "chocolatey-internal|internal-chocolatey"
    # if(!$ChocolateyInternalSource)
    # {
    #     choco source add -n="internal-chocolatey" -s="https://proget/nuget/internal-chocolatey/"
    # }

    choco upgrade chocolatey -y
    #Backup the path just in case it gets clobbered below
    New-Item -Path "$env:HOMEDRIVE$env:HOMEPATH\PathBackup_$CurrentDate" -ItemType "File" -Value ([System.Environment]::GetEnvironmentVariable("Path","Machine")) | Out-Null
    foreach($Package in $Choco_PackageList.Keys)
    {
        $Install_Arguments = $Choco_PackageList[$Package]["install_arguments"]
        choco install $Package -y --params=$Choco_PackageList[$Package]["params"] --install-arguments=$Install_Arguments
        choco upgrade $Package -y --params=$Choco_PackageList[$Package]["params"] --install-arguments=$Install_Arguments

        #Check if the path was set correctly by the installers and then correct problems
        foreach($PathItem in $Choco_PackageList[$Package]["paths"])
        {
            $IsInPath = ([System.Environment]::GetEnvironmentVariable("Path","Machine") | Select-String -Pattern ($PathItem -replace "\\", "\\")).Length -gt 0
            if(!$IsInPath)
            {
                $CurrentMachinePath = [System.Environment]::GetEnvironmentVariable("Path","Machine")
                $env:Path = "$env:Path;$PathItem"
                [System.Environment]::SetEnvironmentVariable("Path", ("$CurrentMachinePath;$PathItem" -replace ";;", ";"), "Machine")
            }
        }
    }

    #You might have to manually close your powershell and restart the script at this point. The below two lines will try to prevent that.
    #Symptoms of this not running will be missing extensions in vscode
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    refreshenv
}

####### Configuration ########
if($UserProfileOnly -or $RegularInstall)
{
    Write-Output "Backing up VSCode settings if required..."
    $SettingsFileExists = Test-Path $path_VSCodeSettingsFile
    #Backup previous settings just in case
    if($SettingsFileExists)
    {
        Copy-Item -Path $path_VSCodeSettingsFile -Destination $path_VSCodeSettingsBackup
    }
        
    #Change configuration values
    if((Test-Path $path_VSCodeSettingsBackup) -or !$SettingsFileExists)
    {
        if(!$SettingsFileExists)
        {
            Write-Output "Settings file didn't exist. Creating blank file."
            #Create a new file
            $VSCodeConfigurationData = "{ }" | ConvertFrom-Json
        }
        else
        {
            #Read existing content in
            $VSCodeConfigurationData = Get-Content -Raw -Path $path_VSCodeSettingsFile -ErrorAction silentlycontinue | ConvertFrom-Json
        }

        #Change configuration if it isn't blank
        if($VSCodeConfigurationData)
        {
            foreach($ConfigItemName in $VSCode_configurationList.Keys)
            {
                if($VSCodeConfigurationData.$ConfigItemName) 
                {
                    $VSCodeConfigurationData.PSObject.Properties.Remove($ConfigItemName)
                }
                $VSCodeConfigurationData | Add-Member -Name $ConfigItemName -Value $VSCode_configurationList[$ConfigItemName] -MemberType NoteProperty
            }
        }

        #Write json back to settings file
        $VSCodeConfigurationData | ConvertTo-Json | Out-File $path_VSCodeSettingsFile -Encoding utf8
    }
    else{
        #This will only happen if VSCode was previously installed and configured on the machine before running this script
        Write-Error "The settings backup file wasn't created properly at $path_VSCodeSettingsBackup. Didn't proceed with changing vscode settings."
    }

    ####### VSCode Plugin Install ########
    Write-Output "Installing VSCode Extensions"
    foreach($Extension in $VSCode_ExtensionList.Keys)
    {
        code --install-extension $Extension
    }

    #Go back to default proxyStrictSSL settings (remove the setting)
    $VSCodeConfigurationData.PSObject.Properties.Remove("http.proxyStrictSSL")
    $VSCodeConfigurationData | ConvertTo-Json | Out-File $path_VSCodeSettingsFile -Encoding utf8

    #Fill Global Git config
    $User_FullName = Read-Host "Please enter your full name. ex: John Doe"
    git config --global user.name $User_FullName
    git config --get user.name
    $User_Email = Read-Host "Please enter your email address. ex: John.Doe@lukereid.dev"
    git config --global user.email $User_Email
    git config --get user.email
    $GlobalGitIgnoreFile = git config --get config.excludesfile
    git config --global commit.gpgsign true
    
    if(($GlobalGitIgnoreFile -eq $path_GlobalGitignorePath) -or !($GlobalGitIgnoreFile))
    {
        git config --global config.excludesfile $path_GlobalGitignorePath
        git config --get config.excludesfile
        if(!(Test-Path $path_GlobalGitignorePath))
        {
            #Generate a global .gitignore file manually compiled from a list of sample .gitignores from https://github.com/github/gitignore
            Copy-Item $PSScriptRoot\gitignore-global $path_GlobalGitignorePath
        }
    }
}


####### SSH Configuration ########
if($UserProfileOnly -or $RegularInstall)
{
    #Remove the old version of OpenSSH installed by windows. 
    Write-Output "Configuring SSH for git through command line. For VSCode git follow the instructions in GitLab/ITWiki"
    Write-Output "Removing the default version of SSH from windows..."
    Remove-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
    Write-Information "Please confirm your SSH version! The version of SSH should be greater than 8.2. The current version is:"
    ssh -V
    Write-Information "If the version isn't greater than 8.2 you may still have to remove the default version of SSH installed by windows." 

    #Create default .ssh path if it doesn't exist
    if(!(Test-Path $path_SSHSettingsDirectory))
    {
        mkdir $path_SSHSettingsDirectory
    }

    #Add the git service provider ed25519 public key to trusted hosts if it isn't in there already. Note that this isn't strictly secure and is vulnerable to MitM attacks.
    if(!(Test-Path $path_SSHKnownHosts) -or ((Get-Content $path_SSHKnownHosts | Select-String -Pattern $GitServiceDNS).Length -eq 0))
    {
        Write-Information "Generating SSH Keys"
        ssh-keyscan -t $configSSH_KeyType $GitServiceDNS >> $path_SSHKnownHosts
        Write-Information "Please make sure that you store the passphrase some safe like a password manager. Copy the keys created at $path_SSHSettingsDirectory into an SSH Key secret type."
    }
    
    if(!(Test-Path $path_SSHKnownHosts) -or ((Get-Content $path_SSHKnownHosts | Select-String -Pattern $GitServiceDNS).Length -eq 0))
    {
        Write-Information "Generating GPG key. The email you use must match an approved email in GitLab. The key size must be at least 4096"
        gpg --full-generate-key
        gpg --list-secret-keys --keyid-format=long
        Write-Information "Copy the 16 digit alphanumeric string from the sec line above and add it to GitHub."
    }
    
    
    $path_GPGSettingsDirectory = "$env:HOMEDRIVE$env:HOMEPATH\.gnupg"
    #Generate a new SSH key if it's missing
    $Date = (Get-Date).ToString("yyyy-MM-dd")
    if (!(Test-Path "$path_SSHSettingsDirectory\id_$configSSH_KeyType"))
    {
        ssh-keygen -t $configSSH_KeyType -C "$env:COMPUTERNAME SSH Key generated by Git Install script on $Date" -f "$path_SSHSettingsDirectory\id_$configSSH_KeyType"
    }

    #Generate warnings
    Write-Information "Copy the public key $path_SSHSettingsDirectory\id_$configSSH_KeyType.pub to the SSH keys on your $GitServiceURL account."
    Start-Process $path_SSHSettingsDirectory
    New-Item -Path $path_SSHSettingsDirectory -Name "_ PLEASE OPEN THE id_$configSSH_KeyType.pub FILE AND COPY THE WHOLE LINE CONTAINING $GitServiceDNS INTO $GitServiceDNS" -ItemType "File" -Value "" -Force | Out-Null
}
